import numpy as np
import json
from sklearn.model_selection import train_test_split
import math
from keras.utils import np_utils

def create_oprations_set(raw_filename, op_index_filename):
    with open(raw_filename) as raw_data:
        operations = set()
        for line in raw_data:
            operation = line.replace('\n', '').split(' ')
            operations = operations.union(set(operation))

    operations_list = list(operations)
    map_index = range(len(operations))
    ziped_op_index = zip(operations_list, map_index)

    operations_dic = {k: v+1 for k, v in ziped_op_index} # V+1 for no operation index is 0

    with open(op_index_filename, 'w') as json_file:
        json.dump(operations_dic, json_file, ensure_ascii=False)
    print("operations index dictionary create success! Dic file saved in ", op_index_filename)
    print("the operations's count is:",len(operations))


def raw_labels_to_index(raw_lable_filename):
    raw_lables_list=[]

    with open(raw_lable_filename) as raw_data:
        for line in raw_data:
            raw_lables_list.append(line.replace('\n', '').strip())

    lables_set_index = {}
    for lable in raw_lables_list:
        if lable not in lables_set_index:
            lables_set_index[lable] = len(lables_set_index)
            print(lable,"--",lables_set_index[lable])
    print("the lables's count is:",len(lables_set_index))
    lables_index_np = np.zeros(len(raw_lables_list))
    for i, lable in enumerate(raw_lables_list):
        lables_index_np[i] = lables_set_index.get(lable)
    return lables_index_np


def load_npz_data(file_path):
    f = np.load(file_path)
    x_train, y_train = f['x_train'], f['y_train']
    x_test, y_test = f['x_test'], f['y_test']
    f.close()
    return (x_train, y_train), (x_test, y_test)


def process_raw_data_4_attention(raw_api_filename, raw_lable_filename, op_index_filename,attention_train_data):
    np.set_printoptions(threshold=np.inf)

    with open(op_index_filename, 'r') as fileR:
        operation_dic = json.load(fileR)
        fileR.close()
        print("the total operations count is:",len(operation_dic))

    with open(raw_api_filename) as raw_data:
        line_num = len(raw_data.readlines())
        print("line_num:", line_num)

    with open(raw_api_filename) as raw_data:
        longest_operation_size = 0
        for line in enumerate(raw_data):
            operation = str(line).split(' ')
            tmp_len = len(operation)
            if tmp_len > longest_operation_size:
                longest_operation_size = tmp_len
        longest_operation_size = pow(math.ceil(math.sqrt(longest_operation_size)), 2)
        print("longest_length is:", longest_operation_size)
        print("picture size is: ",math.sqrt(longest_operation_size)," * ",math.sqrt(longest_operation_size))

    with open(raw_api_filename) as raw_data:
        print("the total operations's ocunt is:", len(operation_dic), "\n the longest operation length is",
              longest_operation_size)
        processed_data_np = np.empty(shape=(line_num, longest_operation_size)).astype("int32")
        for i, line in enumerate(raw_data):
            tmp_processed_data = [0 for x in range(0, longest_operation_size)]
            operation = line.replace('\n', '').split(' ')
            j = 0
            for op in operation:
                if len(op) != 0:
                    index = operation_dic[op]
                    tmp_processed_data[j] = index
                    j += 1
            processed_data_np[i] = np.array(tmp_processed_data)
            if i== 93:
                print(i,"   ",line)
                print(tmp_processed_data)
        labels_index_np = raw_labels_to_index(raw_lable_filename)

        x_train, x_test, y_train, y_test = train_test_split(processed_data_np, labels_index_np, test_size=0.1,
                                                            random_state=0)

        np.savez(attention_train_data, x_train=x_train,x_test=x_test,y_train=y_train, y_test=y_test)
def main():
    raw_api_filename = 'F:/数据集/ocatak/mal-api-2019/sample_no_repet_api_data.txt'
    raw_lable_filename = 'F:/数据集/ocatak/mal-api-2019/sample_labels.csv'
    op_index_filename = 'F:/数据集/ocatak/operations_map_final.json'
    attention_train_data = "F:/数据集/ocatak/attention_train_test_data_final.npz"

    create_oprations_set(raw_api_filename, op_index_filename)
    process_raw_data_4_attention(raw_api_filename,raw_lable_filename,  op_index_filename,attention_train_data)
    # (X_Train, y_Train), (X_Test, y_Test) = load_npz_data("F:/数据集/Kim2016/malware_dataset/malware_dataset/train_test_data_final.npz")


if __name__ == "__main__":
    main()
