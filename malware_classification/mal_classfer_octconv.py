import time
import numpy as np
from keras.utils import np_utils

np.random.seed(1337)
from keras.layers import Input, BatchNormalization, MaxPool2D, Conv2D, Dropout, Flatten, Dense
from keras.models import *
from malware_classification import common_process_data as read_data
from keras.layers import Input, LSTM, Bidirectional, Conv2D, Reshape
from OctConv.keras_octave_conv import OctaveConv2D,octave_dual
import keras

batch_size = 32
TIME_STEPS = 25
INPUT_DIM = 25
lstm_units = 128
num_classes = 13
epochs = 100
alpha = 0.25  # alpha of OctConv

# data pre-processing
# (X_train, y_train), (X_test, y_test) = mnist.load_data('mnist.npz')
(X_train, y_train), (X_test, y_test) = read_data.load_npz_data(
    "F:/数据集/Kim2016/malware_dataset/malware_dataset/attention_train_test_data_final.npz")
X_train = X_train.reshape(-1, 25, 25,1) / 255.  # why / 255?
X_test = X_test.reshape(-1, 25, 25,1) / 255.
y_train = np_utils.to_categorical(y_train, num_classes=num_classes)
y_test = np_utils.to_categorical(y_test, num_classes=num_classes)

print(X_train.shape)


inputs = Input(shape=(25, 25, 1))

# build OctConv model linked attention LSTM outputs ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
# Octave Conv
normal = BatchNormalization()(inputs)
high, low = OctaveConv2D(64, kernel_size=(3,3),ratio_out=0.25,activation='relu')(normal)
high, low = MaxPool2D()(high), MaxPool2D()(low)
high, low = OctaveConv2D(32, kernel_size=(3,3),activation='relu')([high, low])
conv = OctaveConv2D(64, kernel_size=3, ratio_out=0.0)([high, low])

pool = octave_dual(conv, MaxPool2D())
flatten = Flatten()(pool)
dense1 = Dense(32, activation='relu', name='dense_32')(flatten)
normal = BatchNormalization()(dense1)
dropout = Dropout(rate=0.25)(normal)
outputs = Dense(units=13, activation='softmax')(dropout)
model = Model(inputs=inputs, outputs=outputs)
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy'],
)

model.summary()
train_history = model.fit(X_train, y_train,validation_split=0.2, epochs=epochs, batch_size=batch_size)
# octave_score = model.evaluate(lstm_out_X_test, y_test)
# print('Accuracy of Octave: %.4f' % octave_score[1])
# ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑

print('Testing--------------')
loss, accuracy = model.evaluate(X_test, y_test)

print('test loss:', loss)
print('test accuracy:', accuracy)

print("-----------------------DY Add------------------------")
import matplotlib.pyplot as plt


def show_train_history(train_history, train, validation):
    plt.plot(train_history.history[train])
    plt.plot(train_history.history[validation])
    title = 'Train History of Trained_LSTM-OctConv: epochs-' + str(epochs) + " " + str(time.strftime("%Y-%m-%d %X", time.localtime()))
    plt.title(title)
    plt.ylabel(train)
    plt.xlabel('Epoch')
    plt.legend(['train', 'validation'], loc='upper left')
    plt.show()


show_train_history(train_history, 'acc', 'val_acc')

show_train_history(train_history, 'loss', 'val_loss')

scores = model.evaluate(X_test, y_test)
print()
print("\t[Info] Accuracy of testing data = {:2.1f}%".format(scores[1] * 100.0))
